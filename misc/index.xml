<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Misc on ZealScott</title>
    <link>https://tech.zealscott.com/misc/</link>
    <description>Recent content in Misc on ZealScott</description>
    <image>
      <url>https://tech.zealscott.com/papermod-cover.png</url>
      <link>https://tech.zealscott.com/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 21 Sep 2018 21:05:20 +0800</lastBuildDate><atom:link href="https://tech.zealscott.com/misc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在服务器上部署 Jupyter Notebook</title>
      <link>https://tech.zealscott.com/misc/jupyter-notebook/</link>
      <pubDate>Wed, 22 Apr 2020 22:31:03 +0800</pubDate>
      
      <guid>https://tech.zealscott.com/misc/jupyter-notebook/</guid>
      <description>安装 Ananconda  使用命令行安装  1  wget wget https://repo.continuum.io/archive/Anaconda3-5.2.0-Linux-x86_64.sh    注意，选择安装路径时，如果想要所有用户都能使用，则安装在usr/local/ananconda3目录下 注意修改/etc/profile.d下的conda.sh，指定环境变量（在登入另外的用户时会提醒） 更改源。创建~/.condarc文件，输入  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  channels: - defaults show_channel_urls: true channel_alias: https://mirrors.tuna.tsinghua.edu.cn/anaconda default_channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2 custom_channels: conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud    至此，已经完成 python、conda 及 jupyter-notebook 的安装。  部署远程云服务  生成Jupyter Notebook配置文件  1  jupyter notebook --generate-config     生成的配置文件，后来用来设置服务器的配置</description>
    </item>
    
    <item>
      <title>使用 Hugo 进行持续集成写作及同步</title>
      <link>https://tech.zealscott.com/misc/hugo-integration/</link>
      <pubDate>Wed, 22 Jan 2020 20:31:03 +0800</pubDate>
      
      <guid>https://tech.zealscott.com/misc/hugo-integration/</guid>
      <description>我们通常会在本地计算机上写 Markdown 文件，然后使用 Hugo 建立静态博客网站。因此需要一种方法将本地文件同步到服务器上，同时实现 GitHub 集成，确保网站的可维护性。我使用了 Git hook 的方法进行同步与集成。
服务器上 更新 1 2 3  yum update yum install nginx yum install git   新建 hugo 用户：
1 2  adduser hugo passwd hugo   安装 hugo 安装 go 1 2  yum -y install golang go version   源码安装 1 2 3 4 5  mkdir $HOME/src cd $HOME/src git clone https://github.com/gohugoio/hugo.git cd hugo go install --tags extended   yum 安装 有些主题需要支持sass/scss功能，如果使用 yum 安装 hugo，则没办法安装extend版本，会导致编译失败。</description>
    </item>
    
    <item>
      <title>Go Hugo!</title>
      <link>https://tech.zealscott.com/misc/go-hugo/</link>
      <pubDate>Tue, 21 Jan 2020 20:31:03 +0800</pubDate>
      
      <guid>https://tech.zealscott.com/misc/go-hugo/</guid>
      <description>The world’s fastest framework for building websites</description>
    </item>
    
    <item>
      <title>Laravel Homestead 安装小记</title>
      <link>https://tech.zealscott.com/misc/laravel-installation/</link>
      <pubDate>Fri, 11 Oct 2019 20:15:55 +0800</pubDate>
      
      <guid>https://tech.zealscott.com/misc/laravel-installation/</guid>
      <description>环境配置 在Laravel官网上，推荐使用Laravel Homestead虚拟机部署安装环境。Homestead是Laravel官方提供的基于Vargrant的Box，也就是虚拟机原型系统，预装了一切 Laravel 需要的东西。
这里使用VirtualBox虚拟机，而Vagrant是一个虚拟机管理工具。
配置Laravel环境的主要步骤有：
 安装VirtualBox和Vagrant 安装Homestead Vagrant Box 安装Homestead（Clone 项目） 修改配置文件（Homestead.yaml和/etc/hosts） 启动虚拟机，SSH登陆虚拟机 下载Laravel  安装VirtualBox和Vagrant 直接官网安装dmg即可：
  VirtualBox 下载地址
  Vagrant下载地址
  验证是否安装成功在终端使用以下命令行，显示版本信息就 OK 了。
1  vagrant -v   安装 Homestead Vagrant Box 在线安装 直接输入以下命令行：
1  vagrant box add laravel/homestead   这个步骤相当于下载虚拟机的预装系统，下载文件超过1个G，实测非常慢，及时是挂VPN，也太慢。
离线导入 下载Box 最后我选择了首先下载.box文件，然后导入的方式。
在Vagrant官网进入Homestead box，选择最新的版本，例如8.2.1，然后进入该版本页面，如https://app.vagrantup.com/laravel/boxes/homestead/versions/8.2.1，直接在后面添加/providers/virtualbox.box组成完整的URL，即可使用迅雷等下载工具进行下载，完整的URL为：
 https://app.vagrantup.com/laravel/boxes/homestead/versions/8.2.1/providers/virtualbox.box
 下载完成后得到virtualbox.box的文件，在命令行中进入该文件的目录，然后输入以下命令即可成功导入。
 vagrant box add laravel/homestead ./virtualbox.box
 导入 注意，这里导入时vagrant并不知道版本信息。因此，我们需要进入box的文件夹，手动增加版本信息。</description>
    </item>
    
    <item>
      <title>ThingWorx 安装及部署</title>
      <link>https://tech.zealscott.com/misc/thingworx-installation/</link>
      <pubDate>Thu, 11 Jul 2019 17:46:57 +0800</pubDate>
      
      <guid>https://tech.zealscott.com/misc/thingworx-installation/</guid>
      <description>本文以Windows系统为例，介绍ThingWorx的安装步骤。
H2版 安装  从PTC官网下载合适版本的Thingworx（h2版） 访问Tomcat 网站下载32-bit/64-bit Windows 服务安装程序。 下载JDK8以上的版本。  注意，H2为内嵌数据库，并不需要安装。
部署 Tomcat   在“HTTP/1.1 连接器端口” 字段，键入“80” (或其他可用端口)，其余默认设置安装
  启动Tomcat，在“Java 选项”字段中，将以下内容添加至选项字段的末尾：
  1 2 3 4  -Dserver -Dd64 -XX:+UseG1GC -Dfile.encoding=UTF-8 -Djava.library.path=&amp;lt;path to Tomcat&amp;gt;\webapps\Thingworx\WEB-INF\extensions       清除Initial memory pool 和 Maximum memory pool字段中的任意值。
  在Tomcat 的安装位置，打开CATALINA_HOME/conf/web.xml。通过将以下内容添加至web.xml 文件来替换默认错误页面。将以下内容置于web-app 标记内(在welcome-list 标记后)
  1 2 3 4  &amp;lt;error-page&amp;gt; &amp;lt;exception-type&amp;gt;java.lang.Throwable&amp;lt;/exception-type&amp;gt; &amp;lt;location&amp;gt;/error.jsp&amp;lt;/location&amp;gt; &amp;lt;/error-page&amp;gt;       要增加影响静态文件缓存的默认缓存设置，请在$CATALINA_HOME/conf/context.</description>
    </item>
    
    <item>
      <title>VIM 使用简介</title>
      <link>https://tech.zealscott.com/misc/vim/</link>
      <pubDate>Thu, 20 Sep 2018 10:52:29 +0800</pubDate>
      
      <guid>https://tech.zealscott.com/misc/vim/</guid>
      <description>VIM的启动  启动命令：vi my.txt 如果文件存在，则vi显示文件内容并等待用户的命令。 如果指定的文件不存在，则vi将告知用户这是未命名的文件，并进入一个空白的界面。 启动vi时都是默认处于命令模式。用户必须使用命令切换到文本输入模式才能进行输入编辑，或者可执行删除、复制等编辑命令。  VIM的退出  冒号进命令行模式下：  :q! 不存档强制退出。 :w 保存但不退出，w(rite)后可加所要存档的文档名。 :wq 存档后退出。 :x 与:wq相同   命令模式  ZZ、ZQ  保存/不保存退出    编辑 插入模式   输入:set nu 可设置vi显示行号
  新增 (append)
 a ：从光标所在位置后面开始新增资料 A： 从光标所在行最后面的地方开始新增资料。    插入 (insert)
 i： 从光标所在位置前面开始插入资料 I ：从光标所在行的第一个非空白字元前面开始插入资料。    开始 (open)
 o ：在光标所在行下新增一列并进入输入模式。 O: 在光标所在行上方新增一列并进入输入模式。    命令模式 删除 #表示数字</description>
    </item>
    
    <item>
      <title>写在第 100 篇博文之际</title>
      <link>https://tech.zealscott.com/misc/100-blogs-goal/</link>
      <pubDate>Wed, 08 Aug 2018 11:47:00 +0800</pubDate>
      
      <guid>https://tech.zealscott.com/misc/100-blogs-goal/</guid>
      <description>想写博客的念头已经很久了，在年初的春节终于有时间折腾出了自己的博客。一开始，仅仅是想用博客来记录自己学习中遇到的问题，作为备忘；后来上课了发现，与其将自己课上做的笔记写在 OneNote 上，还不如直接写在博客上，也许能帮助到一些同学呢；再到后来上数学课，就索性将数学公式、笔记也写在博客上（写 LaTeX 还是件很蛋疼的事）；到现在，我将自己做的一些小项目也记录下来，也许未来也会写点琐碎的感悟，也不一定呢。
写博客是件很美妙的事情，一方面，每次的记录其实并没有那么愉快，虽然 Markdown 已经足够简单不用担心排版的问题，但每天总得多花一两个小时总结也有点繁琐（不过慢慢就习惯了这种记录方式），另一方面，当我第一次收到陌生朋友评论的感谢时，我才发现原来我的博客也有人看呀，成就感满满。于是我开始在网站中加入百度统计和 Google Analysis，时不时看看今天有没有人看我的博客，也算是激励我不断更新的动力吧。
很惭愧的是，自己能力有限，多数博文也仅仅是上课的笔记和总结，并没有太多“干货”。好在自己还算勤快，半年就达到了自己定的一年目标（完成 100 篇博文）。这半年来其实自己的收获是巨大的，虽然每天都学的很累，但是总算是有种 feeling &amp;ndash;终于在 cs 上入门了。转专业这一年来，拒绝了所有的活动与比赛，静下心来搞学习，总算是有所收获。一年的时间说长也长，说短也短，原专业的朋友保研的保研，考研的考研，出国的出国。总有人半开玩笑的问我，“现在你看见他们都保研清北啦，你后不后悔”。我只是笑笑，当然不后悔了。但羡慕是有点羡慕的，毕竟是更好的平台，而自己选择了竞争压力太很多的行业，很难再像以前那样“游刃有余”。好在自己是个喜欢折腾且异常固执的人，倒也不觉得有什么。
最近博客更新得不勤，主要是因为放假了，以及自己在做两个小项目、学英语，没太多东西可以记录。经过一年的“闭关”，自己也觉得是时候参加一些比赛来实践实践（没点奖状怎么丰富自己简历啊哭），找了两三个自己认为还挺有挑战的比赛，从 9 月份开始玩玩。
当然，目前最重要的事情还是考好雅思&amp;hellip;&amp;hellip;</description>
    </item>
    
    <item>
      <title>Hexo 博文加密</title>
      <link>https://tech.zealscott.com/misc/hexo-encrypt/</link>
      <pubDate>Wed, 11 Jul 2018 10:15:55 +0800</pubDate>
      
      <guid>https://tech.zealscott.com/misc/hexo-encrypt/</guid>
      <description>很多时候当我们写了一篇博客，但并不想所有人能够访问它。对于WordPress这很容易做到，但是对于hexo，由于是静态网页，并不能做到完全的加密。
在GitHub上发现了有个人做了一个加密的插件，还挺好用，推荐给大家。
安装 在你的hexo根目录的package.json文件夹中添加：
 &amp;ldquo;hexo-blog-encrypt&amp;rdquo;: &amp;ldquo;2.0.*&amp;rdquo;
 然后在命令行中输入：
 npm install
 这样这个插件就安装好了。
找到根目录下的_config.yml文件，添加如下：
1 2 3 4  # Security ## encrypt: enable: true   这样就可以使用插件了。
使用 在你要加密的文章头部写入password，例如：
1 2 3 4 5 6 7  --- title: Hello World date: 2016-03-30 21:18:02 password: abc123 abstract: Welcome to my blog, enter password to read. message: Welcome to my blog, enter password to read. ---   这样就可以需要输入密码访问了。</description>
    </item>
    
    <item>
      <title>VScode 使用技巧</title>
      <link>https://tech.zealscott.com/misc/vscode/</link>
      <pubDate>Mon, 23 Apr 2018 15:39:35 +0800</pubDate>
      
      <guid>https://tech.zealscott.com/misc/vscode/</guid>
      <description>编辑技巧  跳出括号  直接再输入一次右括号   快速换行  默认快捷键Ctrl + Enter，可以使用键盘映射将Shift + Enter转换为快速换行   选中一行  默认ctrl +i   切换显示侧边栏  默认ctrl+B   搜索  ctrl+d匹配当前词 alt+w搜索时以当前完整词 alt+c搜索时区分大小写    插件及设置  使用C/C++，将自带的代码补全关闭，下载clang以及对应的插件，设置：  &amp;quot;C_Cpp.autocomplete&amp;quot;: &amp;quot;Disabled&amp;quot;， &amp;quot;clang.executable&amp;quot;: &amp;quot;C:\\Program Files\\LLVM\\bin\\clang.exe&amp;quot;,   使用sync插件自动同步  shift + alt + U自动上传配置 shift + alt + D 自动下载配置 牢记自己的token    </description>
    </item>
    
    <item>
      <title>在 Sublime Text3 中配置并使用 LaTex </title>
      <link>https://tech.zealscott.com/misc/sublime/</link>
      <pubDate>Wed, 28 Feb 2018 14:55:39 +0800</pubDate>
      
      <guid>https://tech.zealscott.com/misc/sublime/</guid>
      <description>准备工作  Sublime Text3 安装并配置好Package Control，若没有安装也没关系，我已经把常用的插件都放到了我的GitHub，可以按照说明复制到指定路径即可。 MiKTeX,下载并安装。 LaTeXTools(后面会有安装介绍) Sumatra PDF，下载并安装。  LaTeXTools 安装 最简单的方法是直接fork我的GitHub，按照ReadMe文件中的指示复制到指定路径。 或者使用Package Control，按组合键Ctrl+Shift+P，然后再输入install，选择 Package Control: install package。进入库后，搜索LaTeXTools，直接回车即可安装。
配置 重启sublime text3，按组合键Ctrl+Shift+P，然后再输入LaTeXTools：Reset user settings to default，回车。再在 Sublime Text3 的安装路径中找LaTeXTools.sublime-settings文件，例如，我的默认的文件路径为C:\Users\scott\AppData\Roaming\Sublime Text 3\Packages\User。打开文件，搜索关键词texpath，再输入
 &amp;ldquo;texpath&amp;rdquo; : &amp;ldquo;C:\Program Files\MiKTeX 2.9\miktex\bin\x64;$PATH&amp;rdquo;,
 如图所示： 配置SumatraPDF 添加环境变量 打开环境变量设置，在user的环境变量中添加SumatraPDF 的主程序目录，如图所示： 配置反向搜索 打开命令提示符（win+R），执行以下命令：（将其中的安装路径替换成你实际的安装路径）
 sumatrapdf.exe -inverse-search &amp;ldquo;&amp;quot;C:\Program Files\Sublime Text 3\sublime_text.exe&amp;quot; &amp;quot;%f:%l&amp;quot;&amp;rdquo;
 使用 自动补全 现在环境已经基本配置好了。但我们习惯了自动补全，没有自动补全哪行。因此在 Sublime Text3 中，Preference-settings-user，添加
 &amp;ldquo;auto_complete_selector&amp;rdquo;: &amp;ldquo;source, text&amp;rdquo;,
 即可实现自动补全。
中文支持 在.tex文件的开头，加上\documentclass[UTF8]{ctexart}，即可实现中文支持。第一次编译可能需要下载安装支持包，一直continue即可。
使用和编译 每次在 Sublime Text3 中新建文件，保存为.</description>
    </item>
    
    <item>
      <title>Hexo 多设备同步与版本控制实现</title>
      <link>https://tech.zealscott.com/misc/hexo-sync/</link>
      <pubDate>Wed, 21 Feb 2018 10:37:07 +0800</pubDate>
      
      <guid>https://tech.zealscott.com/misc/hexo-sync/</guid>
      <description>我们知道，hexo是一个静态网页个人博客，所有的资源和文件都是储存在本地的，但这样不利于实现网页的版本控制和随时随地发表博客，因此Google了一下hexo多设备同步的问题</description>
    </item>
    
    <item>
      <title>Hexo 下 LaTeX 无法显示的解决方案</title>
      <link>https://tech.zealscott.com/misc/hexo-latex/</link>
      <pubDate>Thu, 08 Feb 2018 20:31:03 +0800</pubDate>
      
      <guid>https://tech.zealscott.com/misc/hexo-latex/</guid>
      <description>今天写博客时需要用到LaTeX，但使用了晚上说的各种方法依然无法成功，折腾了一晚上终于可以了，给同样困惑的小伙伴一些参考</description>
    </item>
    
    <item>
      <title>Hexo 中 scaffolds 创建模板问题</title>
      <link>https://tech.zealscott.com/misc/hexo-scaffolds/</link>
      <pubDate>Thu, 08 Feb 2018 11:47:00 +0800</pubDate>
      
      <guid>https://tech.zealscott.com/misc/hexo-scaffolds/</guid>
      <description>由于经常要写同一类型的文章，懒得每篇文章都添加同样的tags和categories，因此可使用scaffolds创建模板，每次只需要hexo new layout &amp;quot;标题&amp;quot;即可生成相同样式的文章。
但近期使用时发现一些问题，如下图所示，我创建了一个名为Hexo的模板，并正确放到scaffolds中： 然后再git中输入： 到这一步都没有任何问题，但当我们查看文章时，发现并没有生成我们想要的tags和categories，而是多了一个layout，这不是我们想要的。 后来发现，在scaffolds中创建模板时，模板标题不能为大写，中文也可以，但就是不能大写，不知道为什么，先占个坑，望有同样问题的同学能看见这篇文章。</description>
    </item>
    
    <item>
      <title>树莓派之BT下载器</title>
      <link>https://tech.zealscott.com/misc/bt-downloader/</link>
      <pubDate>Fri, 02 Feb 2018 22:06:22 +0800</pubDate>
      
      <guid>https://tech.zealscott.com/misc/bt-downloader/</guid>
      <description>配置环境 首先安装transmission：
 sudo apt-get install transmission-daemon
 然后创建下载目录，一个是下载完成的目录（complete），一个是未完成的目录（incomplete），不建议将移动硬盘长时间挂载在树莓派上运行
1 2  mkdir -p /home/pi/incomplete # for incomplete downloads mkdir /home/pi/complete # finished downloads   设置权限
1 2 3 4 5  sudo usermod -a -G debian-transmission pi sudo chgrp debian-transmission /home/pi/incomplete sudo chgrp debian-transmission /home/pi/complete chmod 770 /home/pi/incomplete chmod 770 /home/pi/complete   修改配置文件,配置文件目录为
 vim /etc/transmission-daemon/settings.json
 打开文件如图所示 修改其中的三项即可，分别为：
1 2 3  &amp;#34;download-dir&amp;#34;: &amp;#34;/home/pi/complete&amp;#34;, &amp;#34;incomplete-dir&amp;#34;: &amp;#34;/home/pi/incomplete&amp;#34;, &amp;#34;rpc-whitelist&amp;#34;: &amp;#34;192.</description>
    </item>
    
    <item>
      <title>树莓派设置静态IP地址</title>
      <link>https://tech.zealscott.com/misc/static-ip/</link>
      <pubDate>Thu, 01 Feb 2018 22:08:03 +0800</pubDate>
      
      <guid>https://tech.zealscott.com/misc/static-ip/</guid>
      <description>首先打开树莓派的命令行，输入：
 sudo vi /etc/dhcpcd.conf
 即可用vi编辑配置文件。
在文件末尾输入：
1 2 3 4 5 6 7 8 9 10 11  interface eth0 static ip_address=192.168.0.10/24 static routers=192.168.0.1 static domain_name_servers=192.168.0.1 interface wlan0 static ip_address=192.168.0.200/24 static routers=192.168.0.1 static domain_name_servers=192.168.0.1   其中，eth0是有线的配置，wlan0是无线配置
ip_address就是静态IP，后面要接/24
routers是网关
static domain_name_servers是DNS
然后再在命令行执行
 sudo reboot
 重启树莓派，即可根据树莓派的联网方式用静态IP连接。</description>
    </item>
    
    <item>
      <title>远程调试树莓派（PyCharm实现）</title>
      <link>https://tech.zealscott.com/misc/raspberry-python/</link>
      <pubDate>Thu, 01 Feb 2018 21:18:40 +0800</pubDate>
      
      <guid>https://tech.zealscott.com/misc/raspberry-python/</guid>
      <description>对于Linux和文本编辑器不那么熟悉的小伙伴来说，直接在树莓派中写程序可谓是痛苦万分。本文将介绍如何使用PyCharm远程调试树莓派，并同步当前python文件到树莓派中</description>
    </item>
    
    <item>
      <title>树莓派首次上手</title>
      <link>https://tech.zealscott.com/misc/setup/</link>
      <pubDate>Wed, 31 Jan 2018 17:51:57 +0800</pubDate>
      
      <guid>https://tech.zealscott.com/misc/setup/</guid>
      <description>寒假突发奇想买了一个树莓派，参考了网上很多教程，终于安装成功，下面分享下折腾经验</description>
    </item>
    
  </channel>
</rss>
